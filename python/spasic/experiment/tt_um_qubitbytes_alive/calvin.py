import random
from spasic.experiment.experiment_result import ExpResult
from spasic.experiment.experiment_parameters import ExperimentParameters

# RIP Calvin 2010-2024 - Goodbye, Calvin, it’s time to go, But we’ll see your smile in the stars’ soft glow.

M=[
 [0x62,0x25,0x2d,0x61,0xd4,0xd0,0x80,0xba,0xa1,0xbe],
 [0x8a,0x1f,0xa1,0x01,0x75,0x43,0x7c],
 [0x10,0x17,0x54,0x37,0x45,0x74,0x49,0x52,0x47,0xc0],
 [0x5b,0xaa,0x4d,0x61,0xd4,0xd0,0x80,0xba,0xa1,0xbe],
 [0x8a,0x1f,0xa1,0x01,0x75,0x43,0x7c],
 [0x63,0x26,0x2e,0x62,0xd5,0xd1,0x81,0xbb,0xa2,0xbf],
 [0x11,0x18,0x55,0x38,0x46,0x75,0x4a,0x53,0x48,0xc1],
 [0x39,0x31,0xa1,0x1c,0x11,0x5a,0x09,0xcf,0x00],
 [0x93,0x5c,0xe7,0xe3,0x48,0x96,0x8a,0xbc,0x21,0xbe],
 [0x46,0x80,0xcd,0x1a,0x2e,0x74,0xfc],
 [0x02,0xd0,0x46,0xcb,0x40,0x89,0x34,0x72,0x44,0x9e],
 [0xb1,0x34,0x12,0x11,0xba,0xb0,0x26,0x23,0xa1,0xbe],
 [0x51,0x08,0xfd,0x12,0xef,0x5b,0xa2,0x86,0x9b,0xc0],
 [0x13,0x98,0xfa,0x4c,0x9a,0x90,0x10,0x3d,0x35,0xde],
 [0x09,0x35,0x33,0x93,0x42,0x38,0x1a,0x62,0x78],
 [0x7a,0xc1,0x84,0x37,0x51,0x40,0x95,0x17,0x2d,0x7e],
 [0x8a,0x04,0xad,0x45,0xcb,0x5e,0xa6,0x86,0x13,0xc0],
 [0x0c,0x43,0xa1,0xb9,0x0d,0xd4,0x84,0x82,0x34,0x5e],
 [0x60,0x06,0x4d,0x22,0x7a,0x9e,0xa4,0xf0,0x08,0x9e],
 [0x20,0x23,0x33,0xe9,0xae,0x9e,0x8a,0xb0,0x4f,0xc0],
 [0x98,0x14,0x4d,0x08,0x11,0x26,0x9c,0x5d,0x13,0xc0]
]

T_IDX=13


def pick() -> tuple[int, list]:
    i = [x for x in range(len(M)) if x != T_IDX]
    c = random.choice(i)
    return c, M[c]


def test_charlie(params: ExperimentParameters, snoopy: ExpResult, num_iterations: int=50):
    i, m = pick()
    snoopy.result = bytearray(m)
    tt = params.tt
    tt.uio_oe_pico.value = 0
    tt.shuttle.tt_um_qubitbytes_alive.enable()
    tt.reset_project(True)
    tt.clock_project_once()
    tt.reset_project(False)
    v = int(tt.uo_out.value)
    tt.clock_project_PWM(100000)
    for _ in range(num_iterations):
        while v != 79:
            v = int(tt.uo_out.value)
            if not params.keep_running:
                tt.clock_project_stop()
                snoopy.result = bytearray(M[T_IDX])
                return
    tt.clock_project_stop()
    snoopy.result = bytearray(m)
    return
